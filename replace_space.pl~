#!/usr/bin/perl

use strict;
use Getopt::Long;

my $list;
my %final_tab;
my $nbpath;
my $nblist;
############################GESTION DES OPTIONS##################################"

my ($opt_h, $opt_ver, $opt_force, $opt_oldchar ,$opt_newchar);
GetOptions(
           "h"   => \$opt_h,          "help"      => \$opt_h,
           "v"   => \$opt_ver,        "version"   => \$opt_ver,
           "o=s" => \$opt_oldchar,    "oldchar=s" => \$opt_oldchar,
           "n=s" => \$opt_newchar,    "newchar=s" => \$opt_newchar,
	   "f"   => \$opt_force,      "force"     => \$opt_force,
);


if ($opt_h) {
    print_help();
    exit;
}

if ($opt_ver) {
        print_version();
        exit;
}

my $old_char;
my $new_char;

if ($opt_oldchar) {
        $old_char =  $opt_oldchar;
}else{
    $old_char = " ";
}

if ($opt_newchar) {
        $new_char =  $opt_newchar;
}else{
    $new_char =  "_";
}

if ($opt_force) {
	my $PATH = `pwd`;
	$nbpath = scalar(split("/",$PATH));
	my @ListeRep= `find $PATH`;
	$nblist=0;
	foreach $list (sort @ListeRep){
		my $oldlist1 = "$list";
	    	my @oldlist = split("/", $oldlist1);
		if ( scalar(@oldlist) > "$nblist") {$nblist = scalar(@oldlist); }
		print $nblist-$nbpath;
		for(my $i=0 ; $i<=($nblist-$nbpath); $i++){

			main();
		}
	}
	exit 0;
}


sub print_help {
    print "    Usage: replace_space.pl {-v -h -o \"old_char\" -n \"new_char\" } \n";
    print "    replace_space.pl 1.03
    2013 Jason LELORRAIN
    This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

    -h, --help
        Display detailed help
    -v, --version
        Show version information
    -f, --force
        force to replace the old_char by new_char
    -o, --oldchar
        char to replace, by default : \" \"
    -n, --newchar
        new char to place, by default : _
   
    This program will replace all \"oldchar\" (by default space) by \"newchar\" (by default underscore) for all repository name in the sub tree

    !!!warning!!! => the current directory must do not contain special character
      

";

exit 0
}

sub print_version {
        print "
    replace_space.pl  version 1.03 - June 5th, 2013
    2013 Jason LELORRAIN
    This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.
";
exit 0
}

############################################################################################################################################
## remplace dans le dossier courant tous les espaces par des "_", le dossier courant ne doit pas lui mÃªme posseder de caractere speciaux. ##
############################################################################################################################################

sub main {

	my $PATH = `pwd`;
	my @ListeRep= `find $PATH`;

	foreach $list (reverse sort @ListeRep){

	    my $oldlist1 = "$list";
	    my @oldlist = split("/", $oldlist1);
	    $nbpath = scalar(split("/",$PATH));
	    $nblist = scalar(@oldlist);
	    $oldlist[$nblist-1]=~ s/\n//g;
	    $oldlist1 =~ s/\n//g;
	    my $list2 = $oldlist[$nblist-1];
	    my $PATHDIR="";
	    for(my $i=$nbpath ; $i<($nblist-1); $i++){
		$oldlist[$i]=~ s/$old_char/$new_char/g;
		$PATHDIR=$PATHDIR.$oldlist[$i]."/"
	    }
	    $PATH=~ s/\n//g;
	    $PATHDIR=~ s/\n//g;
	    $list2=~ s/$old_char/$new_char/g;
	    $final_tab{"$oldlist1"} = $PATH."/".$PATHDIR.$list2;
	    print $oldlist1." , ".$PATH."/".$PATHDIR.$list2."\n";
	}

	#print "Appliquer les modifications ci dessus (yes/no) ? : ";
	#my $resp = <STDIN>;
	#$resp =~ s/\n//g;
	#if ( $resp eq 'y' || $resp eq "yes" ) {
		foreach my $k (reverse sort keys(%final_tab)) {
		    #print $k." , ".$final_tab{$k}."\n";
		    rename ($k , $final_tab{$k});
		}
	#}

}



my $PATH = `pwd`;
my @ListeRep= `find $PATH`;

foreach $list (reverse sort @ListeRep){

	    my $oldlist1 = "$list";
	    my @oldlist = split("/", $oldlist1);
	    $nbpath = scalar(split("/",$PATH));
	    $nblist = scalar(@oldlist);
	    $oldlist[$nblist-1]=~ s/\n//g;
	    $oldlist1 =~ s/\n//g;
	    my $list2 = $oldlist[$nblist-1];
	    my $PATHDIR="";
	    for(my $i=$nbpath ; $i<($nblist-1); $i++){
		$oldlist[$i]=~ s/$old_char/$new_char/g;
		$PATHDIR=$PATHDIR.$oldlist[$i]."/"
	    }
	    $PATH=~ s/\n//g;
	    $PATHDIR=~ s/\n//g;
	    $list2=~ s/$old_char/$new_char/g;
	    $final_tab{"$oldlist1"} = $PATH."/".$PATHDIR.$list2;
	    print $oldlist1." , ".$PATH."/".$PATHDIR.$list2."\n";
	}

	print "Appliquer les modifications ci dessus (yes/no) ? : ";
	my $resp = <STDIN>;
	$resp =~ s/\n//g;
	if ( $resp eq 'y' || $resp eq "yes" ) {
	foreach my $k (reverse sort keys(%final_tab)) {
	    #print $k." , ".$final_tab{$k}."\n";
	    rename ($k , $final_tab{$k});
	}
}
exit 0;

##########################################################################################################################################
#################################################     JASON LELORRAIN, 2013     ##########################################################
########################################################################################################################################## 
